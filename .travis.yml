language: cpp
dist: trusty
sudo: false
os: linux

git:
  depth: 1

matrix:
  include:
    # coverage
    - env: COMPILER=g++-8 COVERAGE=ON
      compiler: gcc
      addons:
        apt:
          update: true
          packages: ["g++-8"]
          sources: ["ubuntu-toolchain-r-test"]

    # g++ 8
    - env: COMPILER=g++-8 STANDARD=17
      compiler: gcc
      addons:
        apt:
          update: true
          packages: ["g++-8"]
          sources: ["ubuntu-toolchain-r-test"]
    # g++ 7
    - env: COMPILER=g++-7 STANDARD=17
      compiler: gcc
      addons:
        apt:
          update: true
          packages: ["g++-7"]
          sources: ["ubuntu-toolchain-r-test"]
    # g++ 6
    - env: COMPILER=g++-6 STANDARD=14
      compiler: gcc
      addons:
        apt:
          update: true
          packages: ["g++-6"]
          sources: ["ubuntu-toolchain-r-test"]
    # g++ 5
    - env: COMPILER=g++-5 STANDARD=14
      compiler: gcc
      addons:
        apt:
          update: true
          packages: ["g++-5"]
          sources: ["ubuntu-toolchain-r-test"]

    # clang 8
    - env: COMPILER=clang++-8 STANDARD=17
      compiler: clang
      addons:
        apt:
          update: true
          packages: ["clang-8", "g++-7"]
          sources: ["llvm-toolchain-trusty-8", "ubuntu-toolchain-r-test"]
    # clang 7
    - env: COMPILER=clang++-7 STANDARD=17
      compiler: clang
      addons:
        apt:
          update: true
          packages: ["clang-7", "g++-7"]
          sources: ["llvm-toolchain-trusty-7", "ubuntu-toolchain-r-test"]
    # clang 6.0
    - env: COMPILER=clang++-6.0 STANDARD=17
      compiler: clang
      addons:
        apt:
          update: true
          packages: ["clang-6.0", "g++-7"]
          sources: ["llvm-toolchain-trusty-6.0", "ubuntu-toolchain-r-test"]
    # clang 5.0
    - env: COMPILER=clang++-5.0 STANDARD=17
      compiler: clang
      addons:
        apt:
          update: true
          packages: ["clang-5.0", "g++-7"]
          sources: ["llvm-toolchain-trusty-5.0", "ubuntu-toolchain-r-test"]
    # clang 4.0
    - env: COMPILER=clang++-4.0 STANDARD=14
      compiler: clang
      addons:
        apt:
          update: true
          packages: ["clang-4.0", "g++-7"]
          sources: ["llvm-toolchain-trusty-4.0", "ubuntu-toolchain-r-test"]
    # clang 3.9
    - env: COMPILER=clang++-3.9 STANDARD=14
      compiler: clang
      addons:
        apt:
          update: true
          packages: ["clang-3.9", "g++-7"]
          sources: ["llvm-toolchain-trusty-3.9", "ubuntu-toolchain-r-test"]
    # clang 3.8
    - env: COMPILER=clang++-3.8 STANDARD=14
      compiler: clang
      addons:
        apt:
          update: true
          packages: ["clang-3.8", "g++-7"]
          sources: ["llvm-toolchain-trusty-3.8", "ubuntu-toolchain-r-test"]
    # clang 3.7
    - env: COMPILER=clang++-3.7 STANDARD=14
      compiler: clang
      addons:
        apt:
          update: true
          packages: ["clang-3.7", "g++-7"]
          sources: ["llvm-toolchain-trusty-3.7", "ubuntu-toolchain-r-test"]
    # clang 3.6
    - env: COMPILER=clang++-3.6 STANDARD=14
      compiler: clang
      addons:
        apt:
          update: true
          packages: ["clang-3.6", "g++-7"]
          sources: ["llvm-toolchain-trusty-3.6", "llvm-toolchain-trusty-3.6-binaries", "ubuntu-toolchain-r-test"]

    # osx xcode 9
    - env: COMPILER=clang++ STANDARD=17
      compiler: clang
      osx_image: xcode9
      os: osx
    # osx llvm-gcc
    - env: COMPILER=g++ STANDARD=17
      compiler: gcc
      os: osx

install:
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

  - |
    if [[ "${TRAVIS_OS_NAME}" = "linux" ]]; then
      CMAKE_URL="http://www.cmake.org/files/v3.14/cmake-3.14.2-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
      cd ${DEPS_DIR}

      if [[ "${COMPILER}" = "clang++-3.7" ]]; then
        sudo apt-get clean
        sudo rm -rf /var/lib/apt/lists/*
        wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        echo "deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-3.7 main" | sudo tee -a /etc/apt/sources.list > /dev/null
        sudo apt-get --allow-unauthenticated -yq update
        sudo apt-get -yq --no-install-suggests --no-install-recommends --force-yes install clang-3.7
      fi

      if [[ -n "${COVERAGE}" ]]; then
        wget http://downloads.sourceforge.net/ltp/lcov-1.14.tar.gz
        tar xvfz lcov-1.14.tar.gz
        make -C lcov-1.14
        cd ..
        find . -name "*lcov*"
      fi
    fi
  - cd ${TRAVIS_BUILD_DIR}
  - export CXX="${COMPILER}"
  - |
    cd ${TRAVIS_BUILD_DIR}
    git clone https://github.com/ericniebler/range-v3
    cd range-v3
    git checkout v1.0-beta
    mkdir build
    cd build
    cmake -DCMAKE_CXX_COMPILER=${CXX} -DRANGE_V3_TESTS=OFF -DRANGE_V3_HEADER_CHECKS=OFF -DRANGE_V3_EXAMPLES=OFF -DRANGE_V3_PERF=OFF -DRANGE_V3_DOCS=OFF ..
    sudo make install
    cd ${TRAVIS_BUILD_DIR}

before_script:
  - cmake --version
  - ${CXX} --version

script:
  - |
    run_build() {
      cmake -DCMAKE_CXX_COMPILER=${CXX} -DCMAKE_BUILD_TYPE=Debug -DSCN_BENCHMARKS=OFF "$@" .. || return 1
      make -k -j || return 1
      ctest -j $(nproc --all) -V -C Debug || return 1
      make clean || return 1

      cmake -DCMAKE_CXX_COMPILER=${CXX} -DCMAKE_BUILD_TYPE=Release -DSCN_BENCHMARKS=OFF "$@" .. || return 1
      make -k -j || return 1
      ctest -j $(nproc --all) -V -C Release || return 1
      make clean || return 1
      return 0
    }
    cd ${TRAVIS_BUILD_DIR}
    mkdir build
    cd build
    if [[ -n "$COVERAGE" ]]; then
      cmake -DCMAKE_CXX_COMPILER=${CXX} -DCMAKE_BUILD_TYPE=Debug -DSCN_BENCHMARKS=OFF -DSCN_COVERAGE=ON ..
      make -k -j
      ctest -j $(nproc --all) --output-on-failure

      ${DEPS_DIR}/lcov-1.14/bin/lcov --gcov-tool /usr/bin/gcov-8 --capture --directory . --output-file coverage.info
      ${DEPS_DIR}/lcov-1.14/bin/lcov --gcov-tool /usr/bin/gcov-8 --remove coverage.info '/usr/*' '${TRAVIS_BUILD_DIR}/test/doctest/*' --output-file coverage.info
      ${DEPS_DIR}/lcov-1.14/bin/lcov --gcov-tool /usr/bin/gcov-8 --list coverage.info
      bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"

      return 0
    fi

    if [[ -z "$STANDARD" ]]; then
      run_build
    else
      standards="11 14 17"
      for std in $standards; do
        run_build -DCMAKE_CXX_STANDARD=$std || exit 1
        if [[ "${std}" == "${STANDARD}" ]]; then
          break
        fi
      done
    fi
